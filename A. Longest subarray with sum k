gotta return longest subarray possible if sum is k

Brute - for loop nested

better - 
int longestSubarrayWithSumK(vector<int> a, long long k) {
    int length = 0;
    long long sum = 0;
    map<long long, int> mp;
    for(int i = 0; i < a.size(); i++) {
        sum += a[i];
        if(sum == k) length = max(length, i+1);
        int rem = sum - k;
        if(mp.find(rem) != mp.end()) {
            int len = i - mp[rem];
            length = max(length, len);
        }
        mp[sum] = i;
    }
    return length;
}

Optimal - 
int longestSubarrayWithSumK(vector<int> a, long long k) {
    int left = 0;
    int right = 0;
    int maxlen = 0;
    long long sum = a[0];
    int n = a.size();
    while(right < n) {
        while(left <= right && sum > k) {
            sum -= a[left];
            left++;
        }
        if(sum == k) maxlen = max(maxlen, right - left + 1);
        right++;
        if(right < n) sum += a[right];
    }
    return maxlen;
}
